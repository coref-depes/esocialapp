package br.gov.camara.esocial.controller;



import java.time.LocalDate;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;

import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.bea.xml.stream.samples.Parse;
import com.google.gson.Gson;

import br.gov.camara.esocial.dto.AtributoCadini;
import br.gov.camara.esocial.dto.ChaveDTOCadini;
import br.gov.camara.esocial.dto.ChaveDTOEventoNP;
import br.gov.camara.esocial.model.esocial.ChaveEventoDTO;
import br.gov.camara.esocial.model.sigesp.SigAfastamento;
import br.gov.camara.esocial.model.sigesp.SigGrupo;
import br.gov.camara.esocial.model.sigesp.SigHistoricoRequisicaoServidor;
import br.gov.camara.esocial.model.sigesp.SigHistoricoServidorCargoSP;
import br.gov.camara.esocial.model.sigesp.SigHistoricoServidorGrupo;
import br.gov.camara.esocial.service.AfastamentoService;
import br.gov.camara.esocial.service.ChaveEventoService;
import br.gov.camara.esocial.service.GrupoService;
import br.gov.camara.esocial.service.HistoricoServidorCargoSpService;
import br.gov.camara.esocial.service.HistoricoServidorGrupoService;
import br.gov.camara.esocial.service.HistoricoServidorRequisicaoService;



@RestController
@RequestMapping("/cadinativos")
public class ChaveEventoControllerInativos {

	public static HttpHeaders headersJson() {
		HttpHeaders headers = new HttpHeaders();	
	    headers.setContentType(MediaType.APPLICATION_JSON);
	    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
	    return headers;
	}
	
	
	private void dormeUmPouco(int segundos) {
		try {
			segundos = segundos*1000;
			Thread.sleep(segundos);
		} catch (InterruptedException e) {}
	}	
	
	
			
	

	
	
	private List<ChaveEvento> chs = new ArrayList<ChaveEvento>();
	

	List<SigAfastamento>  afastamentos;
	@Autowired
	private ChaveEventoService chaveservice;
	@Autowired
	private GrupoService gruposervice;
	List<SigGrupo>  grupos;
	SigGrupo  grupo;
	ChaveEvento chave;
	SigHistoricoServidorGrupo historico;
	
	@Autowired
	private HistoricoServidorRequisicaoService requisicaoservice;

	@Autowired
	private HistoricoServidorCargoSpService historicocargoservice;
	
	private List<SigHistoricoRequisicaoServidor> requisicoes;
	private List<SigHistoricoServidorCargoSP>  historicocargosp;

	
	private List<SigHistoricoServidorGrupo> historicogrupo;
	
	@Autowired
	private HistoricoServidorGrupoService historicoservgruposervice;
	
	


	@GetMapping("/abrecadastroinicial/{codtipochave}")
	public  ModelAndView abrecadastroinicial(@PathVariable(value="codtipochave") String codtipochave) {
		String msgvalidacao = "Evento n√£o Localizado";
		String titulo = codtipochave+" -  Cadastro inicial ";
		chave = new ChaveEvento();
		chave.setDatreferencia(LocalDate.of(2021, 11, 22));
		//evento.setDatiniciohistorico(LocalDate.of(2017, 03, 01));
		chave.setCodtipochave(codtipochave);
	
		grupos = gruposervice.grupos(codtipochave);
		grupo = grupos.get(0);
		ModelAndView modelAndView = new ModelAndView("cadastro/cadastroinicialintativos");
		//evento.setDatiniciohistorico(LocalDate.of(2017, 03, 01));
		modelAndView.addObject("grupos", grupos);
		modelAndView.addObject("grupo", grupo);
		modelAndView.addObject("chave", chave);
		modelAndView.addObject("titulo", titulo);
		modelAndView.addObject("msgvalidacao", msgvalidacao);
		
		return modelAndView;
		
	}
	
	
	@PostMapping("/listacadastroinicial")
	public ModelAndView  listacadastroinicial(SigGrupo grupo, ChaveEvento chave ) {
		ModelAndView modelAndView = new ModelAndView("cadastro/cadastroinicialintativos");
		System.out.println(grupo.getTexdescricao()+"__");
		historicogrupo = historicoservgruposervice.cadastroInicial(chave.getDatreferencia(), grupo.getCodobjeto());
		String msgvalidacao = "Evento Localizado";
		String titulo = chave.getCodtipochave()+" -  Cadastro inicial ";
		grupos = gruposervice.grupos(chave.getCodtipochave());
		modelAndView.addObject("historicogrupo", historicogrupo);
		modelAndView.addObject("chave", chave);
		modelAndView.addObject("grupo", grupo);
		modelAndView.addObject("grupos", grupos);
		modelAndView.addObject("titulo", titulo);
		modelAndView.addObject("msgvalidacao", msgvalidacao);
		
		return modelAndView;
		
	}
	
	
	@PostMapping("/geracadastroinicial")
	public ModelAndView GeraCadastroInicial(SigGrupo grupo, ChaveEvento chave ) {

		for(SigHistoricoServidorGrupo hcc : historicogrupo){						
				chaveservice.CriaChaveCadastroInicialInativos(hcc, grupo, chave);
		}
			System.out.println(historicogrupo.size());	 
			   	ModelAndView modelAndView = new ModelAndView("cadastro/cadastroinicialintativos");
			 	String msgvalidacao = "Evento Localizado";
				String titulo = chave.getCodtipochave()+" -  Cadastro inicial ";
				grupos = gruposervice.grupos(chave.getCodtipochave());
				modelAndView.addObject("historicogrupo", historicogrupo);
				modelAndView.addObject("chave", chave);
				modelAndView.addObject("grupo", grupo);
				modelAndView.addObject("grupos", grupos);
				modelAndView.addObject("titulo", titulo);
				modelAndView.addObject("msgvalidacao", msgvalidacao);
				
				return modelAndView;			 			 
			 
		    }
	

	
	

public List<LocalDate>  preenchedata() {
		
		List<LocalDate> resultado = new ArrayList<LocalDate>();
		LocalDate datinicio = LocalDate.now();
		LocalDate datfim = LocalDate.now();
		 DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
		String texdia = "01";
		String texmes = "";
		
		int ano = Integer.valueOf(String.valueOf(datfim.getYear()));
		int mes = Integer.valueOf(String.valueOf(datfim.getMonthValue()));
		if (mes<10) {texmes="0"+Integer.toString(mes);}
		else
		{texmes=Integer.toString(mes);}
		
		String texdata = texdia+"/"+texmes+"/"+Integer.toString(ano);
		
		datfim = LocalDate.parse(texdata,formatter);
		datfim = datfim.plusDays(-1);

		ano = Integer.valueOf(String.valueOf(datfim.getYear()));
		mes = Integer.valueOf(String.valueOf(datfim.getMonthValue()));
		if (mes<10) {texmes="0"+Integer.toString(mes);}
		else
		{texmes=Integer.toString(mes);}
		 texdata = texdia+"/"+texmes+"/"+Integer.toString(ano);
		datinicio = LocalDate.parse(texdata,formatter);
		resultado.add(datinicio);
		resultado.add(datfim);
		
	
		return resultado;
	}


}
